{"version":3,"sources":["index.js"],"names":["itemArray","input","document","querySelector","buttonAdd","buttonSortByName","buttonSortByValue","buttonDelete","buttonShowXML","itemList","itemSelectionHandler","isAlphaNumeric","string","i","len","length","code","charCodeAt","parseInput","array","split","name","trim","value","updateItemList","doSortByName","index","sortedArray","sort","prevItem","currentItem","localeCompare","innerHTML","forEach","item","insertAdjacentHTML","addEventListener","event","selected","target","tagName","className","classList","add","info","nameValue","alert","push","selectedItem","nameValueToDelete","textContent","itemToDelete","findIndex","element","splice","XMLSerializer","serializeToString"],"mappings":";AAAA,IAAMA,EAAY,GAGZC,EAAQC,SAASC,cAAc,aAC/BC,EAAYF,SAASC,cAAc,QACnCE,EAAmBH,SAASC,cAAc,cAC1CG,EAAoBJ,SAASC,cAAc,eAC3CI,EAAeL,SAASC,cAAc,WACtCK,EAAgBN,SAASC,cAAc,aACvCM,EAAWP,SAASC,cAAc,cAClCO,EAAuBR,SAASC,cAAc,MAIpD,SAASQ,EAAeC,GACjB,IAAA,IAAIC,EAAI,EAAGC,EAAMF,EAAOG,OAAQF,EAAIC,EAAKD,GAAK,EAAG,CAC9CG,IAAAA,EAAOJ,EAAOK,WAAWJ,GAC3B,KAAEG,EAAO,IAAMA,EAAO,IACjBA,EAAO,IAAMA,EAAO,IACpBA,EAAO,IAAMA,EAAO,KACpB,OAAA,EAGJ,OAAA,EAIT,SAASE,EAAWN,GACZO,IAAAA,EAAQP,EAAOQ,MAAM,KAEvBD,GAAiB,IAAjBA,EAAMJ,OAAc,CAChBM,IAAAA,EAAOF,EAAM,GAAGG,OAChBC,EAAQJ,EAAM,GAAGG,OAEnBD,GAAAA,EAAKN,OAAS,GAAKQ,EAAMR,OAAS,GAAKJ,EAAeU,IAASV,EAAeY,GACzE,MAAA,CAACF,EAAME,GAIX,MAAA,GAwCT,SAASC,EAAeL,EAAOM,GAEvBC,IAAAA,EAAQD,EAAe,EAAI,EAG3BE,EAAcR,EAAMS,KAAK,SAACC,EAAUC,GACxCD,OAAAA,EAASH,GAAOK,cAAcD,EAAYJ,MAI5CjB,EAASuB,UAAY,GAErBL,EAAYM,QAAQ,SAACC,GACnB,OACAzB,EAAS0B,mBAAmB,YACpBD,eAAAA,OAAAA,EAAK,GAAMA,KAAAA,OAAAA,EAAK,GADxB,kBAlDJxB,EAAqB0B,iBAAiB,QAAS,SAACC,GAC1CC,IAAAA,EAEyB,OAAzBD,EAAME,OAAOC,WACfF,EAAWpC,SAASC,cAAc,kBAGhCmC,EAASG,UAAY,IAGvBJ,EAAME,OAAOG,UAAUC,IAAI,eAI/BvC,EAAUgC,iBAAiB,QAAS,WAE5BQ,IAAAA,EAAO3C,EAAMsB,MAEbsB,EAAY3B,EAAW0B,GACJ,IAArBC,EAAU9B,OAEZ+B,MAAM,gCAGN9C,EAAU+C,KAAKF,GAGfpC,EAAS0B,mBAAmB,YACpBS,eAAAA,OAAAA,EANH,gBAUL3C,EAAMsB,MAAQ,MAwBlBlB,EAAiB+B,iBAAiB,QAAS,WAEzCZ,EAAexB,GADM,KAIvBM,EAAkB8B,iBAAiB,QAAS,WAE1CZ,EAAexB,GADM,KAIvBO,EAAa6B,iBAAiB,QAAS,WAE/BY,IAAAA,EAAe9C,SAASC,cAAc,eAGtC8C,EAAoBD,EAAaE,YAAY9B,MAAM,KAGnD+B,EAAenD,EAAUoD,UAAU,SAACC,GACxCA,OAAAA,EAAQ,KAAOJ,EAAkB,IAAMI,EAAQ,KAAOJ,EAAkB,KAI1EjD,EAAUsD,OAAOH,EAAc,GAG/BH,EAAahB,UAAY,KAG3BxB,EAAc4B,iBAAiB,QAAS,WAGtCU,OAAO,IAAIS,eAAiBC,kBAAkB/C","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["const itemArray = [];\n\n// get DOM elements as variables for further usage\nconst input = document.querySelector('.new-name');\nconst buttonAdd = document.querySelector('.add');\nconst buttonSortByName = document.querySelector('.sort-name');\nconst buttonSortByValue = document.querySelector('.sort-value');\nconst buttonDelete = document.querySelector('.delete');\nconst buttonShowXML = document.querySelector('.show-xml');\nconst itemList = document.querySelector('.name-list');\nconst itemSelectionHandler = document.querySelector('ul');\n\n// perform alpha-numeric check\n// note, that only Latin alphabet is supported\nfunction isAlphaNumeric(string) {\n  for (let i = 0, len = string.length; i < len; i += 1) {\n    const code = string.charCodeAt(i);\n    if (!(code > 47 && code < 58) // numeric (0-9)\n        && !(code > 64 && code < 91) // upper alpha (A-Z)\n        && !(code > 96 && code < 123)) { // lower alpha (a-z)\n      return false;\n    }\n  }\n  return true;\n}\n\n// split input string with '=' separator and validate name/value parts\nfunction parseInput(string) {\n  const array = string.split('=');\n\n  if (array.length === 2) {\n    const name = array[0].trim(); // get name and remove spaces\n    const value = array[1].trim(); // get value and remove spaces\n\n    if (name.length > 0 && value.length > 0 && isAlphaNumeric(name) && isAlphaNumeric(value)) {\n      return [name, value]; // correct input case\n    }\n  }\n\n  return []; // wrong input case\n}\n\n// select item\nitemSelectionHandler.addEventListener('click', (event) => {\n  let selected;\n\n  if (event.target.tagName === 'LI') {\n    selected = document.querySelector('li.selected');\n\n    if (selected) {\n      selected.className = '';\n    }\n\n    event.target.classList.add('selected');\n  }\n});\n\nbuttonAdd.addEventListener('click', () => {\n  // get user input\n  const info = input.value;\n\n  const nameValue = parseInput(info);\n  if (nameValue.length === 0) { // incorrect input case\n    // eslint-disable-next-line no-alert\n    alert('Please, enter a valid value');\n  } else {\n    // store name/value pair\n    itemArray.push(nameValue);\n\n    // add new input to itemList\n    itemList.insertAdjacentHTML('beforeend', `\n      <li>${info}</li>\n    `);\n\n    // clear input\n    input.value = '';\n  }\n});\n\nfunction updateItemList(array, doSortByName) {\n  // choose Name index or Value index\n  const index = doSortByName ? 0 : 1;\n\n  // sort array by Name or by Value\n  const sortedArray = array.sort((prevItem, currentItem) => (\n    prevItem[index].localeCompare(currentItem[index])\n  ));\n\n  // clear itemList\n  itemList.innerHTML = '';\n\n  sortedArray.forEach((item) => (\n    // add new item to itemList\n    itemList.insertAdjacentHTML('beforeend', `\n      <li>${item[0]}=${item[1]}</li>\n    `)\n  ));\n}\n\nbuttonSortByName.addEventListener('click', () => {\n  const doSortByName = true;\n  updateItemList(itemArray, doSortByName);\n});\n\nbuttonSortByValue.addEventListener('click', () => {\n  const doSortByName = false;\n  updateItemList(itemArray, doSortByName);\n});\n\nbuttonDelete.addEventListener('click', () => {\n  // get selected item to be deleted\n  const selectedItem = document.querySelector('li.selected');\n\n  // extract name and value from selected item\n  const nameValueToDelete = selectedItem.textContent.split('=');\n\n  // find index of item in itemArray\n  const itemToDelete = itemArray.findIndex((element) => (\n    element[0] === nameValueToDelete[0] && element[1] === nameValueToDelete[1]\n  ));\n\n  // delete selected item from itemArray\n  itemArray.splice(itemToDelete, 1);\n\n  // delete selected item from DOM ul\n  selectedItem.innerHTML = '';\n});\n\nbuttonShowXML.addEventListener('click', () => {\n  // use XMLSerializer for DOM elements representation in XML format\n  // eslint-disable-next-line no-alert\n  alert((new XMLSerializer()).serializeToString(itemList));\n});\n"]}